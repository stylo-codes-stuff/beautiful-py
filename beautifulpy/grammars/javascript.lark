//WIP Javascript grammar adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar
//this grammar is made assuming the code is being evaluated in strict mode (This means static, yield, and let, along with other keywords listed in the MDN grammar documentation will be tokenized as keywords despite being used in declarations).
%import common.WS
%import common.WORD
%ignore WS

file_input:(compound_statement|statement|comment)*

//comments
comment: (hashbang|line_comment|block_comment)
hashbang: /#![^\n]*/
line_comment: /\/\/[^\n]*/
block_comment: "/*" /./* "*/"
//statements
statement: (variable_declaration|func_call)
compound_statement: (function_declaration)
variable_declaration: ("var"|"const"|"let") IDENTIFIER "=" literal ";"?
function_declaration: "function" IDENTIFIER?  "(" argument_list ")" "{" (statement|compound_statement|comment)* "}"
class_declaration: "class" IDENTIFIER? "{" "}"
func_call: (IDENTIFIER|".")+ "(" argument_list ")" ";"?

//terminals and general use rules
argument_list: (","|OPERATOR|literal)+
literal: DQ_STRING_LITERAL|SQ_STRING_LITERAL|FLOAT_LITERAL|INTEGER_LITERAL|BOOLEAN_LITERAL|IDENTIFIER
IDENTIFIER: ("_"|"$")? (LETTER|DIGIT|"_")+
OPERATOR: "="|"+="|"-="|"*="|"/="|"%="|"**="|"<<="|">>="|">>="|">>>="|"&="|"^="|"|="|"&&="|"||="|"??="|"+"|"-"|"*"|"/"|"%"|"**"|"<<"|">>"|">>"|">>>"|"&"|"^"|"|"|"&&"|"||"|"??"
KEYWORD: "break"|"if"|"this"|"continue"|"in"|"else"|"int"|"new"|"while"|"for"|"null"|"with"|"function"|"return"
DQ_STRING_LITERAL: /\"(\\.|[^"\\])*\"/
SQ_STRING_LITERAL:/\'(\\.|[^"\\])*\'/
BOOLEAN_LITERAL: "true"|"false"
FLOAT_LITERAL.1: /[+-]?/ DIGIT+ "." DIGIT+ | "." DIGIT+
INTEGER_LITERAL.1: /[+-]?[0-9]+/
LETTER: /[a-z]/i
DIGIT: "0" .. "9"

