Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'comment'), [Token('HASH', '#'), Token('WORD', 'a'), Token('WORD', 'bunch'), Token('WORD', 'of'), Token('WORD', 'random'), Token('WORD', 'imports')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'from_import'), [Token('FROM', 'from'), Token('WORD', 'beautifulpy'), Token('IMPORT', 'import'), Token('WORD', 'parsers')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'from_import'), [Token('FROM', 'from'), Token('WORD', 'lark'), Token('IMPORT', 'import'), Token('CNAME', 'Lark'), Token('COMMA', ','), Token('CNAME', 'Transformer'), Token('COMMA', ','), Token('WORD', 'Visitor')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'import'), [Token('IMPORT', 'import'), Token('WORD', 'math')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'import'), [Token('IMPORT', 'import'), Token('WORD', 'itertools')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'import'), [Token('IMPORT', 'import'), Token('WORD', 'time')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'import'), [Token('IMPORT', 'import'), Token('WORD', 'random')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'comment'), [Token('HASH', '#'), Token('WORD', 'functions'), Token('WORD', 'that'), Token('WORD', 'use'), Token('WORD', 'some'), Token('WORD', 'of'), Token('WORD', 'those'), Token('WORD', 'imports')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'function_def'), [Token('DEF', 'def'), Token('CNAME', 'wait_seconds'), Token('LPAR', '('), Token('WORD', 'seconds'), Token('RPAR', ')'), Token('COLON', ':')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'method'), [Token('WORD', 'time'), Token('DOT', '.'), Token('WORD', 'sleep'), Token('DOT', '.'), Token('WORD', 'sleep'), Token('DOT', '.'), Token('WORD', 'sleep'), Token('LPAR', '('), Token('WORD', 'seconds'), Token('RPAR', ')')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'function_def'), [Token('DEF', 'def'), Token('CNAME', 'generate_random_numbers'), Token('LPAR', '('), Token('WORD', 'amount'), Token('RPAR', ')'), Token('COLON', ':')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'list'), [Token('CNAME', 'numbers')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'for_loop'), [Token('FOR', 'for'), Token('WORD', 'number'), Token('IN', 'in'), Tree(Token('RULE', 'method'), [Token('WORD', 'range'), Token('LPAR', '('), Token('WORD', 'amount'), Token('RPAR', ')')]), Token('COLON', ':')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'method'), [Token('WORD', 'numbers'), Token('DOT', '.'), Token('WORD', 'append'), Token('LPAR', '('), Token('WORD', 'random'), Token('DOT', '.'), Token('WORD', 'randint'), Token('LPAR', '('), Tree(Token('RULE', 'integer'), [Token('NUMBER', '0')]), Token('COMMA', ','), Tree(Token('RULE', 'integer'), [Token('NUMBER', '100')]), Token('RPAR', ')'), Token('RPAR', ')')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'comment'), [Token('HASH', '#'), Token('WORD', 'a'), Token('WORD', 'nested'), Token('WORD', 'if'), Token('WORD', 'statement')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'conditional_statement'), [Tree(Token('RULE', 'keyword'), [Token('IF', 'if')]), Tree(Token('RULE', 'boolean'), [Token('TRUE', 'True')]), Tree(Token('RULE', 'comparitive_operator'), [Token('__ANON_0', '==')]), Tree(Token('RULE', 'string'), [Token('ESCAPED_STRING', '"string"')]), Token('COLON', ':')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'conditional_statement'), [Tree(Token('RULE', 'keyword'), [Token('IF', 'if')]), Tree(Token('RULE', 'boolean'), [Token('FALSE', 'False')]), Tree(Token('RULE', 'comparitive_operator'), [Token('__ANON_0', '==')]), Tree(Token('RULE', 'integer'), [Token('NUMBER', '1')]), Token('COLON', ':')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'method'), [Token('WORD', 'print'), Token('LPAR', '('), Tree(Token('RULE', 'string'), [Token('ESCAPED_STRING', '"hello"')]), Token('RPAR', ')')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'comment'), [Token('HASH', '#'), Token('WORD', 'decorator'), Token('WORD', 'example')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'decorator'), [Token('AT', '@'), Token('WORD', 'decorator')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'function_def'), [Token('DEF', 'def'), Token('CNAME', 'decorator_function'), Token('LPAR', '('), Token('RPAR', ')'), Token('COLON', ':')])])])
Tree(Token('RULE', 'tree'), [Tree(Token('RULE', 'branch'), [Tree(Token('RULE', 'variable'), [Token('WORD', 'pass')])])])
